# Generated by Django 5.2.4 on 2025-07-08 02:26

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Currency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("symbol", models.CharField(db_index=True, max_length=10, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("is_crypto", models.BooleanField(db_index=True, default=True)),
                ("decimal_places", models.IntegerField(default=8)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
            ],
            options={
                "verbose_name": "Currency",
                "verbose_name_plural": "Currencies",
                "ordering": ["symbol"],
                "indexes": [
                    models.Index(
                        fields=["is_active", "is_crypto"],
                        name="core_curren_is_acti_2277ed_idx",
                    ),
                    models.Index(
                        fields=["symbol", "is_active"],
                        name="core_curren_symbol_d30176_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Exchange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "code",
                    models.CharField(
                        choices=[
                            ("nobitex", "Nobitex"),
                            ("wallex", "Wallex"),
                            ("ramzinex", "Ramzinex"),
                        ],
                        db_index=True,
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("api_url", models.URLField()),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "rate_limit",
                    models.IntegerField(default=60, help_text="Requests per minute"),
                ),
                ("requires_ip_whitelist", models.BooleanField(default=False)),
                (
                    "max_daily_volume",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                (
                    "connection_timeout",
                    models.IntegerField(
                        default=30, help_text="Connection timeout in seconds"
                    ),
                ),
                (
                    "read_timeout",
                    models.IntegerField(
                        default=30, help_text="Read timeout in seconds"
                    ),
                ),
                (
                    "maker_fee",
                    models.DecimalField(
                        decimal_places=4,
                        default=0.002,
                        help_text="Maker fee percentage",
                        max_digits=5,
                    ),
                ),
                (
                    "taker_fee",
                    models.DecimalField(
                        decimal_places=4,
                        default=0.002,
                        help_text="Taker fee percentage",
                        max_digits=5,
                    ),
                ),
                (
                    "reliability_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=100.0,
                        help_text="Reliability score (0-100)",
                        max_digits=5,
                    ),
                ),
            ],
            options={
                "verbose_name": "Exchange",
                "verbose_name_plural": "Exchanges",
                "ordering": ["name"],
                "indexes": [
                    models.Index(
                        fields=["is_active", "code"],
                        name="core_exchan_is_acti_f9ebc4_idx",
                    ),
                    models.Index(
                        fields=["reliability_score", "-created_at"],
                        name="core_exchan_reliabi_4b7370_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TradingPair",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("symbol", models.CharField(db_index=True, max_length=20, unique=True)),
                (
                    "min_order_size",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "max_order_size",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "base_currency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="base_pairs",
                        to="core.currency",
                    ),
                ),
                (
                    "quote_currency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quote_pairs",
                        to="core.currency",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trading Pair",
                "verbose_name_plural": "Trading Pairs",
                "ordering": ["symbol"],
            },
        ),
        migrations.CreateModel(
            name="ExchangeTradingPair",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "exchange_symbol",
                    models.CharField(
                        help_text="Symbol used by the exchange", max_length=50
                    ),
                ),
                (
                    "min_order_size",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "max_order_size",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "min_order_value",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                ("price_precision", models.IntegerField(default=8)),
                ("amount_precision", models.IntegerField(default=8)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                (
                    "exchange",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trading_pairs",
                        to="core.exchange",
                    ),
                ),
                (
                    "trading_pair",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exchange_pairs",
                        to="core.tradingpair",
                    ),
                ),
            ],
            options={
                "verbose_name": "Exchange Trading Pair",
                "verbose_name_plural": "Exchange Trading Pairs",
                "ordering": ["exchange", "trading_pair"],
            },
        ),
        migrations.CreateModel(
            name="UserAPIKey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable name for this key", max_length=100
                    ),
                ),
                (
                    "key_hash",
                    models.CharField(db_index=True, max_length=128, unique=True),
                ),
                (
                    "key_preview",
                    models.CharField(
                        help_text="First 8 chars for display", max_length=12
                    ),
                ),
                (
                    "permissions",
                    models.JSONField(default=list, help_text="List of allowed actions"),
                ),
                ("ip_whitelist", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("usage_count", models.IntegerField(default=0)),
                ("rate_limit_per_hour", models.IntegerField(default=1000)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="platform_api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User API Key",
                "verbose_name_plural": "User API Keys",
            },
        ),
        migrations.CreateModel(
            name="APICredential",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("encrypted_api_key", models.TextField(help_text="Encrypted API key")),
                (
                    "encrypted_api_secret",
                    models.TextField(blank=True, help_text="Encrypted API secret"),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("permissions", models.JSONField(blank=True, default=dict)),
                ("ip_whitelist", models.JSONField(blank=True, default=list)),
                (
                    "last_used",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("usage_count", models.IntegerField(default=0)),
                ("failed_attempts", models.IntegerField(default=0)),
                ("last_failed_attempt", models.DateTimeField(blank=True, null=True)),
                ("is_locked", models.BooleanField(default=False)),
                ("locked_until", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_credentials",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "exchange",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="credentials",
                        to="core.exchange",
                    ),
                ),
            ],
            options={
                "verbose_name": "API Credential",
                "verbose_name_plural": "API Credentials",
                "indexes": [
                    models.Index(
                        fields=["user", "exchange", "is_active"],
                        name="core_apicre_user_id_2b53e7_idx",
                    ),
                    models.Index(
                        fields=["is_active", "-last_used"],
                        name="core_apicre_is_acti_828ff4_idx",
                    ),
                    models.Index(
                        fields=["is_locked", "locked_until"],
                        name="core_apicre_is_lock_67f35a_idx",
                    ),
                ],
                "unique_together": {("user", "exchange")},
            },
        ),
        migrations.AddIndex(
            model_name="tradingpair",
            index=models.Index(
                fields=["is_active", "symbol"], name="core_tradin_is_acti_4eb349_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tradingpair",
            index=models.Index(
                fields=["base_currency", "quote_currency"],
                name="core_tradin_base_cu_da6d24_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tradingpair",
            unique_together={("base_currency", "quote_currency")},
        ),
        migrations.AddIndex(
            model_name="exchangetradingpair",
            index=models.Index(
                fields=["exchange", "is_active"], name="core_exchan_exchang_247475_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="exchangetradingpair",
            index=models.Index(
                fields=["trading_pair", "is_active"],
                name="core_exchan_trading_21f87c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="exchangetradingpair",
            index=models.Index(
                fields=["is_active", "-last_sync"],
                name="core_exchan_is_acti_23e8f3_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="exchangetradingpair",
            unique_together={("exchange", "trading_pair")},
        ),
        migrations.AddIndex(
            model_name="userapikey",
            index=models.Index(
                fields=["user", "is_active"], name="core_userap_user_id_e7df01_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userapikey",
            index=models.Index(
                fields=["key_hash", "is_active"], name="core_userap_key_has_14d7ef_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userapikey",
            index=models.Index(
                fields=["expires_at", "is_active"],
                name="core_userap_expires_f6d870_idx",
            ),
        ),
    ]
