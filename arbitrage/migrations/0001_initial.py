# Generated by Django 5.2.4 on 2025-07-08 02:26

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ArbitrageConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("auto_trade", models.BooleanField(default=False)),
                (
                    "min_profit_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        help_text="Minimum profit percentage to consider",
                        max_digits=5,
                    ),
                ),
                (
                    "min_profit_amount",
                    models.DecimalField(
                        decimal_places=8,
                        default=10,
                        help_text="Minimum profit amount in quote currency",
                        max_digits=20,
                    ),
                ),
                (
                    "enable_multi_exchange",
                    models.BooleanField(
                        default=True,
                        help_text="Enable complex multi-exchange arbitrage strategies",
                    ),
                ),
                (
                    "max_exchanges_per_strategy",
                    models.IntegerField(
                        default=3,
                        help_text="Maximum number of exchanges in a single strategy",
                    ),
                ),
                (
                    "min_profit_per_exchange",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.3,
                        help_text="Minimum profit percentage per exchange action",
                        max_digits=5,
                    ),
                ),
                (
                    "allocation_strategy",
                    models.CharField(
                        choices=[
                            ("equal", "Equal Distribution"),
                            ("liquidity_weighted", "Liquidity Weighted"),
                            ("profit_weighted", "Profit Weighted"),
                            ("risk_adjusted", "Risk Adjusted"),
                        ],
                        default="risk_adjusted",
                        max_length=20,
                    ),
                ),
                (
                    "max_trade_amount",
                    models.JSONField(
                        default=dict, help_text="Maximum trade amount per currency"
                    ),
                ),
                (
                    "daily_trade_limit",
                    models.JSONField(
                        default=dict, help_text="Daily trade limit per currency"
                    ),
                ),
                (
                    "max_allocation_per_exchange",
                    models.DecimalField(
                        decimal_places=2,
                        default=50.0,
                        help_text="Maximum percentage allocation per exchange",
                        max_digits=5,
                    ),
                ),
                (
                    "max_exposure_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=10,
                        help_text="Maximum percentage of balance to use",
                        max_digits=5,
                    ),
                ),
                (
                    "stop_loss_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=2,
                        help_text="Stop loss percentage",
                        max_digits=5,
                    ),
                ),
                (
                    "require_simultaneous_execution",
                    models.BooleanField(
                        default=True,
                        help_text="Require all orders to be placed simultaneously",
                    ),
                ),
                (
                    "max_execution_time",
                    models.IntegerField(
                        default=30, help_text="Maximum execution time in seconds"
                    ),
                ),
                (
                    "enable_triangular_arbitrage",
                    models.BooleanField(
                        default=False,
                        help_text="Enable triangular arbitrage strategies",
                    ),
                ),
                (
                    "min_liquidity_ratio",
                    models.DecimalField(
                        decimal_places=2,
                        default=10.0,
                        help_text="Minimum liquidity as percentage of order size",
                        max_digits=5,
                    ),
                ),
                (
                    "max_slippage_tolerance",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        help_text="Maximum acceptable slippage percentage",
                        max_digits=5,
                    ),
                ),
                ("enable_notifications", models.BooleanField(default=True)),
                (
                    "notification_channels",
                    models.JSONField(
                        default=list,
                        help_text="List of notification channels (email, sms, etc.)",
                    ),
                ),
                (
                    "notify_on_high_profit",
                    models.DecimalField(
                        decimal_places=2,
                        default=5.0,
                        help_text="Notify when profit exceeds this percentage",
                        max_digits=5,
                    ),
                ),
                (
                    "exchange_reliability_weights",
                    models.JSONField(
                        default=dict,
                        help_text="Reliability weights for exchanges (0.0 to 1.0)",
                    ),
                ),
                (
                    "use_market_orders",
                    models.BooleanField(
                        default=False,
                        help_text="Use market orders instead of limit orders",
                    ),
                ),
                (
                    "slippage_tolerance",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        help_text="Maximum acceptable slippage percentage",
                        max_digits=5,
                    ),
                ),
                (
                    "order_timeout",
                    models.IntegerField(
                        default=60, help_text="Order timeout in seconds"
                    ),
                ),
                (
                    "enabled_exchanges",
                    models.ManyToManyField(
                        blank=True, related_name="arbitrage_configs", to="core.exchange"
                    ),
                ),
                (
                    "enabled_pairs",
                    models.ManyToManyField(
                        blank=True,
                        related_name="arbitrage_configs",
                        to="core.tradingpair",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="arbitrage_config",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Arbitrage Configuration",
                "verbose_name_plural": "Arbitrage Configurations",
            },
        ),
        migrations.CreateModel(
            name="ArbitrageOpportunity",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("buy_price", models.DecimalField(decimal_places=8, max_digits=20)),
                ("sell_price", models.DecimalField(decimal_places=8, max_digits=20)),
                (
                    "available_buy_amount",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "available_sell_amount",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "optimal_amount",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "gross_profit_percentage",
                    models.DecimalField(decimal_places=4, max_digits=10),
                ),
                (
                    "net_profit_percentage",
                    models.DecimalField(decimal_places=4, max_digits=10),
                ),
                (
                    "estimated_profit",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                ("buy_fee", models.DecimalField(decimal_places=8, max_digits=20)),
                ("sell_fee", models.DecimalField(decimal_places=8, max_digits=20)),
                ("total_fees", models.DecimalField(decimal_places=8, max_digits=20)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("detected", "Detected"),
                            ("executing", "Executing"),
                            ("executed", "Executed"),
                            ("expired", "Expired"),
                            ("failed", "Failed"),
                        ],
                        default="detected",
                        max_length=20,
                    ),
                ),
                ("expires_at", models.DateTimeField()),
                ("executed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "executed_amount",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                (
                    "actual_profit",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                (
                    "detection_latency",
                    models.FloatField(
                        help_text="Time taken to detect opportunity in seconds"
                    ),
                ),
                ("market_depth", models.JSONField(blank=True, default=dict)),
                (
                    "buy_exchange",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="arbitrage_buy_opportunities",
                        to="core.exchange",
                    ),
                ),
                (
                    "sell_exchange",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="arbitrage_sell_opportunities",
                        to="core.exchange",
                    ),
                ),
                (
                    "trading_pair",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="arbitrage_opportunities",
                        to="core.tradingpair",
                    ),
                ),
            ],
            options={
                "verbose_name": "Arbitrage Opportunity",
                "verbose_name_plural": "Arbitrage Opportunities",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MultiExchangeArbitrageStrategy",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "strategy_type",
                    models.CharField(
                        choices=[
                            (
                                "one_to_many",
                                "One-to-Many (Buy on one, sell on multiple)",
                            ),
                            (
                                "many_to_one",
                                "Many-to-One (Buy on multiple, sell on one)",
                            ),
                            ("complex", "Complex Multi-Exchange"),
                            ("triangular", "Triangular Arbitrage"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("detected", "Detected"),
                            ("validating", "Validating"),
                            ("executing", "Executing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                        ],
                        default="detected",
                        max_length=20,
                    ),
                ),
                (
                    "buy_actions",
                    models.JSONField(
                        help_text="List of buy actions: [{'exchange': 'nobitex', 'amount': 1.0, 'price': 40000}, ...]"
                    ),
                ),
                (
                    "sell_actions",
                    models.JSONField(
                        help_text="List of sell actions: [{'exchange': 'wallex', 'amount': 0.5, 'price': 40800}, ...]"
                    ),
                ),
                (
                    "total_buy_amount",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "total_sell_amount",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "total_buy_cost",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "total_sell_revenue",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "estimated_profit",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "profit_percentage",
                    models.DecimalField(decimal_places=4, max_digits=10),
                ),
                ("total_fees", models.DecimalField(decimal_places=8, max_digits=20)),
                (
                    "complexity_score",
                    models.IntegerField(help_text="Number of exchanges involved"),
                ),
                (
                    "risk_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "max_execution_time",
                    models.IntegerField(help_text="Maximum execution time in seconds"),
                ),
                ("expires_at", models.DateTimeField()),
                ("execution_started_at", models.DateTimeField(blank=True, null=True)),
                ("execution_completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "actual_profit",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                (
                    "actual_profit_percentage",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                ("market_snapshot", models.JSONField(blank=True, default=dict)),
                (
                    "trading_pair",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="multi_arbitrage_strategies",
                        to="core.tradingpair",
                    ),
                ),
            ],
            options={
                "verbose_name": "Multi-Exchange Arbitrage Strategy",
                "verbose_name_plural": "Multi-Exchange Arbitrage Strategies",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ArbitrageExecution",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("buy_placed", "Buy Order Placed"),
                            ("buy_filled", "Buy Order Filled"),
                            ("sell_placed", "Sell Order Placed"),
                            ("sell_filled", "Sell Order Filled"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("buy_order_id", models.CharField(blank=True, max_length=255)),
                ("buy_order_status", models.CharField(blank=True, max_length=50)),
                (
                    "buy_filled_amount",
                    models.DecimalField(decimal_places=8, default=0, max_digits=20),
                ),
                (
                    "buy_average_price",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                (
                    "buy_fee_paid",
                    models.DecimalField(decimal_places=8, default=0, max_digits=20),
                ),
                ("sell_order_id", models.CharField(blank=True, max_length=255)),
                ("sell_order_status", models.CharField(blank=True, max_length=50)),
                (
                    "sell_filled_amount",
                    models.DecimalField(decimal_places=8, default=0, max_digits=20),
                ),
                (
                    "sell_average_price",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                (
                    "sell_fee_paid",
                    models.DecimalField(decimal_places=8, default=0, max_digits=20),
                ),
                ("buy_order_placed_at", models.DateTimeField(blank=True, null=True)),
                ("buy_order_filled_at", models.DateTimeField(blank=True, null=True)),
                ("sell_order_placed_at", models.DateTimeField(blank=True, null=True)),
                ("sell_order_filled_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "final_profit",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                (
                    "profit_percentage",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("retry_count", models.IntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="arbitrage_executions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "opportunity",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="execution",
                        to="arbitrage.arbitrageopportunity",
                    ),
                ),
                (
                    "multi_strategy",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="simple_executions",
                        to="arbitrage.multiexchangearbitragestrategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Arbitrage Execution",
                "verbose_name_plural": "Arbitrage Executions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ArbitrageAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("opportunity", "Opportunity Detected"),
                            (
                                "multi_opportunity",
                                "Multi-Exchange Opportunity Detected",
                            ),
                            ("execution_started", "Execution Started"),
                            ("execution_completed", "Execution Completed"),
                            ("execution_failed", "Execution Failed"),
                            ("high_profit", "High Profit Opportunity"),
                            ("market_anomaly", "Market Anomaly"),
                            ("strategy_success", "Strategy Completed Successfully"),
                            ("strategy_failed", "Strategy Failed"),
                            ("partial_fill", "Partial Fill Warning"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("message", models.TextField()),
                ("is_read", models.BooleanField(default=False)),
                ("sent_via", models.JSONField(default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="arbitrage_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "opportunity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="arbitrage.arbitrageopportunity",
                    ),
                ),
                (
                    "multi_strategy",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="arbitrage.multiexchangearbitragestrategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Arbitrage Alert",
                "verbose_name_plural": "Arbitrage Alerts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MultiExchangeExecution",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[("BUY", "Buy"), ("SELL", "Sell")], max_length=10
                    ),
                ),
                ("target_amount", models.DecimalField(decimal_places=8, max_digits=20)),
                ("target_price", models.DecimalField(decimal_places=8, max_digits=20)),
                ("exchange_order_id", models.CharField(blank=True, max_length=255)),
                ("order_type", models.CharField(default="LIMIT", max_length=20)),
                (
                    "filled_amount",
                    models.DecimalField(decimal_places=8, default=0, max_digits=20),
                ),
                (
                    "average_price",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=20, null=True
                    ),
                ),
                (
                    "total_fee",
                    models.DecimalField(decimal_places=8, default=0, max_digits=20),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("order_placed", "Order Placed"),
                            ("partially_filled", "Partially Filled"),
                            ("filled", "Filled"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("retry_count", models.IntegerField(default=0)),
                ("order_placed_at", models.DateTimeField(blank=True, null=True)),
                ("first_fill_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "execution_latency",
                    models.FloatField(
                        blank=True,
                        help_text="Time to place order in seconds",
                        null=True,
                    ),
                ),
                (
                    "fill_latency",
                    models.FloatField(
                        blank=True,
                        help_text="Time to complete fill in seconds",
                        null=True,
                    ),
                ),
                (
                    "price_slippage",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "exchange",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.exchange"
                    ),
                ),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="arbitrage.multiexchangearbitragestrategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Multi-Exchange Execution",
                "verbose_name_plural": "Multi-Exchange Executions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="arbitrageopportunity",
            index=models.Index(
                fields=["status", "-created_at"], name="arbitrage_a_status_a4eef3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="arbitrageopportunity",
            index=models.Index(
                fields=["trading_pair", "-created_at"],
                name="arbitrage_a_trading_e1309b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="arbitrageopportunity",
            index=models.Index(
                fields=["-net_profit_percentage"], name="arbitrage_a_net_pro_668dc6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="multiexchangearbitragestrategy",
            index=models.Index(
                fields=["status", "-created_at"], name="arbitrage_m_status_d99950_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="multiexchangearbitragestrategy",
            index=models.Index(
                fields=["trading_pair", "-created_at"],
                name="arbitrage_m_trading_de6a2b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="multiexchangearbitragestrategy",
            index=models.Index(
                fields=["-profit_percentage"], name="arbitrage_m_profit__c22025_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="multiexchangearbitragestrategy",
            index=models.Index(
                fields=["strategy_type", "-created_at"],
                name="arbitrage_m_strateg_6e16ce_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="arbitragealert",
            index=models.Index(
                fields=["user", "is_read", "-created_at"],
                name="arbitrage_a_user_id_371669_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="multiexchangeexecution",
            index=models.Index(
                fields=["strategy", "status"], name="arbitrage_m_strateg_d407ae_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="multiexchangeexecution",
            index=models.Index(
                fields=["exchange", "-created_at"],
                name="arbitrage_m_exchang_ba6979_idx",
            ),
        ),
    ]
